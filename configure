#!/usr/bin/env ruby

pod_name = ARGV.shift
puts pod_name

return

module Pod
  class ConfigureIOS
    attr_reader :configurator

    def self.perform(options)
      new(options).perform
    end

    def initialize(options)
      @configurator = options.fetch(:configurator)
    end

    def perform
      `mv ./templates/ios/* ./`
      configurator.replace_variables_in_files(additional_files)
    end

    private
    def additional_files
      ["UnitTests/UnitTests.m"]
    end
  end

  class TemplateCofigurator

    attr_reader :pod_name

    def initialize(pod_name)
      @pod_name = pod_name
    end

    def ask_with_answers(question, possible_answers)
      possible_answers_string = possible_answers.join(" ")
      puts "#{question} [#{possible_answers_string}]"
      answer = gets.downcase.chomp
      unless possible_answers.include? answer
        puts "Possible answers: #{possible_answers_string}"
        ask_with_answers question, possible_answers
      end
      answer
    end

    def run
      puts "Configuring #{pod_name}"
      platform = ask_with_answers("platform", ["ios", "mac", "both"]).to_sym

      case platform
        when :ios
          ConfigureIOS.perform(configurator: self)
        when :mac
          puts "CONFIGURE MAC"
        when :both
          puts "CONFIGURE BOTH"
      end

      clean_template_files
      rename_template_files
      reinitialize_git_repo
    end

    #----------------------------------------#

    def clean_template_files
      `rm -rf ./**/.gitkeep`
      `rm -rf configure`
      `rm -rf _CONFIGURE.rb`
      `rm -rf README.md`
      `rm -rf templates`
    end

    def replace_variables_in_files(file_names)
      file_names += ['LICENSE',
                    'POD_README.md',
                    'CHANGELOG.md',
                    'NAME.podspec',
                    'Podfile']
      file_names.each do |file_name|
        text = File.read(file_name)
        text.gsub!("${POD_NAME}", pod_name)
        text.gsub!("${USER_NAME}", user_name)
        text.gsub!("${USER_EMAIL}", user_email)
        text.gsub!("${YEAR}", year)
        text.gsub!("${DATE}", date)
        File.open(file_name, "w") { |file| file.puts text }
      end
    end

    def rename_template_files
      `mv POD_README.md README.md`
      `mv NAME.podspec #{pod_name}.podspec`
    end

    def reinitialize_git_repo
      `rm -rf .git`
      `git init`
      `git add -A`
      `git commit -m "Initial commit"`
    end

    #----------------------------------------#

    def user_name
      (ENV['GIT_COMMITTER_NAME'] || `git config user.name`).strip
    end

    def user_email
      (ENV['GIT_COMMITTER_EMAIL'] || `git config user.email`).strip
    end

    def year
      Time.now.year.to_s
    end

    def date
      Time.now.strftime "%m/%d/%Y"
    end

    #----------------------------------------#
  end
end

pod_name = ARGV.shift
Pod::TemplateCofigurator.new(pod_name).run
